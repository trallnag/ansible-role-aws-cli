name: Format & Lint & Test

#
# Formats, lints, and tests the project.
#
# Directly commits back to branch if changes are detected.
#

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [master, dev]
  schedule:
    - cron: 34 12 3 * *

env:
  CACHE_KEY_SUFFIX: "0"
  CACHE_KEY_PREFIX: ""
  PYTHON_VERSION: ""

jobs:
  format-lint-test:
    name: Format & Lint & Test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine PYTHON_VERSION
        run: |
          PYTHON_VERSION=$(./scripts/get-python-version.sh)
          echo "PYTHON_VERSION=$PYTHON_VERSION" | tee -a "$GITHUB_ENV"

      - name: Determine CACHE_KEY_PREFIX
        run: |
          CACHE_KEY_PREFIX="${{ runner.os }}-${{ env.PYTHON_VERSION }}"
          echo "CACHE_KEY_PREFIX=$CACHE_KEY_PREFIX" | tee -a "$GITHUB_ENV"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Poetry installation
        id: cache-poetry-installation
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/bin/poetry
            ~/.local/share/pypoetry
          key: ${{ env.CACHE_KEY_PREFIX }}-poetry-installation-${{ env.CACHE_KEY_SUFFIX }}

      - name: Install Poetry
        if: steps.cache-poetry-installation.outputs.cache-hit != 'true'
        run: curl -sSL https://install.python-poetry.org | python -
        env:
          POETRY_VERSION: ${{ env.poetry_version }}

      - name: Cache Poetry cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: |
            ${{ env.CACHE_KEY_PREFIX }}-poetry-cache-${{ hashFiles('poetry.lock') }}-${{ env.CACHE_KEY_SUFFIX }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-poetry-cache-

      - name: Cache Pip cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
          key: ${{ env.CACHE_KEY_PREFIX }}-pip-cache-${{ env.CACHE_KEY_SUFFIX }}

      - name: Install Pre-commit
        run: pipx install pre-commit

      - name: Cache Pre-Commit cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: |
            ${{ env.CACHE_KEY_PREFIX }}-pre-commit-cache-${{ hashFiles('.pre-commit-config.yaml') }}-${{ env.CACHE_KEY_SUFFIX }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-pre-commit-cache-

      - name: Cache NPM cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: |
            ${{ env.CACHE_KEY_PREFIX }}-npm-cache-${{ hashFiles('.pre-commit-config.yaml') }}-${{ env.CACHE_KEY_SUFFIX }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-npm-cache-

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install project
        run: poetry install

      - name: Run task format
        run: task format

      - name: Run task lint
        run: task lint

      - name: Run task test
        run: task test

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: Apply automatic improvements"
          commit_options: --no-verify --signoff
