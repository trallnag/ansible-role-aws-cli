# ------------------------------------------------------------------------------
# Is already installed and correct version?

- name: Check AWS CLI status
  ansible.builtin.shell: |
    set -o pipefail
    export PATH=/usr/local/aws/bin:$PATH
    if ! aws --version | grep -c aws-cli/{{ awscli_version }}; then
      echo 'install required'
    fi
  args:
    executable: /bin/bash
  register: awscli_status
  changed_when: false

# ------------------------------------------------------------------------------
# Install only if required.

- name: Install Debian family OS packages with APT
  when: >-
    ('install required' in awscli_status.stdout) and (ansible_os_family ==
    "Debian")
  ansible.builtin.apt:
    name: "{{ os_packages_debian }}"
    state: present
  become: true

- name: Download archive to tmp
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.get_url:
    url: "{{ awscli_url }}"
    dest: "{{ awscli_download_path }}"
    mode: u=rw,g=r,o=r
  register: downloaded_archive

- name: Download AWS CLI signature
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.get_url:
    url: "{{ awscli_signature_url }}"
    dest: "{{ awscli_download_path }}"
    mode: u=rw,g=r,o=r
  register: downloaded_signature

- name: Copy AWS public key
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.copy:
    src: awscli.crt
    dest: "{{ awscli_download_path }}"
    mode: u=rw,g=r,o=r
  register: gpg_public_key

- name: Import AWS public key
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.command: "gpg --import {{ gpg_public_key.dest }}"
  changed_when: true
  become: true

- name: Verify downloaded archive using signature file
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.command:
    "gpg --verify {{ downloaded_signature.dest }} {{ downloaded_archive.dest }}"
  register: verification_output
  changed_when: true
  become: true

- name: Assert that GPG verification was successful
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.assert:
    that:
      - verification_output.rc == 0

- name: Unzip downloaded file
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.unarchive:
    src: "{{ downloaded_archive.dest }}"
    dest: "{{ awscli_download_path }}"
    remote_src: yes
  register: unarchived_file

- name: Install AWS CLI
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.command: "{{ unarchived_file.dest }}/aws/install --update"
  changed_when: true
  become: true

# ------------------------------------------------------------------------------
# Validation.

- name: Execute AWS CLI version command
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.command: aws --version
  register: awscli_version_command
  changed_when: false

- name: Validate AWS CLI version command
  when: "'install required' in awscli_status.stdout"
  ansible.builtin.assert:
    that:
      - awscli_version_command.rc == 0
      - "'aws-cli/{{ awscli_version }}' in awscli_version_command.stdout"
